name: MLOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/california-housing-ml
  PYTHON_VERSION: '3.13'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black flake8 isort
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        black --check --diff .
    
    - name: Import sort check
      run: |
        isort --check-only --diff .
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      if: github.event_name == 'push'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Check dependencies for security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true

  build-and-push:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push API Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile.api
        push: true
        tags: ${{ env.DOCKER_IMAGE }}-api:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push UI Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile.ui
        push: true
        tags: ${{ env.DOCKER_IMAGE }}-ui:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Image vulnerability scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_IMAGE }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment script here
        # For example, deploy to AWS ECS, Kubernetes, or a VM
        
        # Example: Deploy using docker-compose (for local/VM deployment)
        # ssh user@your-server "cd /path/to/app && git pull && docker-compose up -d --build"
        
        # Example: Deploy to AWS ECS
        # aws ecs update-service --cluster your-cluster --service your-service --force-new-deployment
        
        echo "Deployment completed successfully!"
    
    - name: Health check
      run: |
        echo "Performing health check..."
        # Wait for deployment to be ready
        sleep 30
        
        # Check if the service is responding
        # curl -f http://your-deployment-url/health || exit 1
        
        echo "Health check passed!"
    
    - name: Notify deployment
      if: always()
      run: |
        echo "Deployment status: ${{ job.status }}"
        # Add notification logic (Slack, email, etc.)

  model-validation:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Train and validate models
      run: |
        python src/models/train.py
        echo "Model training and validation completed"
    
    - name: Model performance check
      run: |
        # Add model performance validation
        python -c "
        import joblib
        import numpy as np
        from sklearn.metrics import mean_squared_error, r2_score
        
        # Load a model and check basic performance
        try:
            model = joblib.load('models/gradient_boosting.joblib')
            print('Model loaded successfully')
            
            # Add your model validation logic here
            print('Model validation passed')
        except Exception as e:
            print(f'Model validation failed: {e}')
            exit(1)
        "
    
    - name: Upload model artifacts
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: trained-models
        path: models/
        retention-days: 30
